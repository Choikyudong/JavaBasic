package level_01.java_chap02;

import java.util.Scanner;

// 자바와 배열(Array)

public class Chap_01 {

    // 프로그램을 구성하다보면 어떠한 정보를
    // 어디에 사용하거나 옮겨야되는 경우가 있다
    // 이제는 단순 변수만으로는 불가능한 많은 정보를 옮기는 배열을 다룬다.
    public static void main(String[] args) {
        /*배열 생성*/
        /*  타입[]   배열이름  =  new  타입[배열길이] */
             int[]  myArray   =  new  int[5];

        /*위처럼 입력하면 5개의 값을 담을 수 있는 myArray라는 배열을 만들 수 있다.*/

        /*배열 사용하기*/
        /*우선 배열을 사용하기전에 배열의 방식에 익숙해져야 한다.*/
        /*myArray의 배열을 눈으로 보면 이렇게 된다.*/

                    /*[0, 1, 2, 3, 4]*/

        /*분명 길이를 5라고 입력을 했는데 4까지 보이고 5는 보이지않는다.*/
        /*위에 적어둔 예시처럼 배열길이는 무조건 0부터 시작한다.*/

        /*이제 가장 단순하게 배열을 사용해보자*/
        myArray[0] = 5; // 배열의 가장 첫번째칸인 0번에 5라는 값을 넣었다.
        //배열[원하는칸] = 값; <- 해당 방법으로 값을 넣을 수 있다.

        /*정말로 그런건지 배열을 출력을 해볼려고 하면 배열은 출력되지않고 이상한 외계어만 출력이 된다.*/
        System.out.println(myArray); // [I@3ac3fd8b <- 이런식으로

        /*java_chap1의 chap1에서 자바의 기본형들은 System을 이용해서 손쉽게 출력이 가능하다.*/
        /*이제부터 하는것들은 자바의 기본형이 아니다, chap2에서 간단하게 익혔던 class나 앞으로 사용할 다양할 객체들*/
        /*모두 [I@3ac3fd8b <- 이런식으로 출력이 될것이다. 지금시점에서는 기본형을 제외하고는 바로 출력이 불가능하다 정도만 알자*/

        /*그렇다면 확인하는 방법은 대표적으로 반복문을 이용하는것이다.*/
        /*우선 이런식으로 입력한다는걸 보자*/
        for (int i = 0; i < myArray.length; i++) {
            System.out.println(myArray[i]);
        }

        /*첫줄부터 해석하면 myArray.length의 .length는 배열의 최대길이를 파악할 수 있는 메서드이다.(애용하자)*/
        /*그리고 위에서 가장 단수하게 배열을 사용하는 방법이라고 말한 것처럼 배열[원하는값]으로 탐색을 하는 것인데*/
        /*여기서 i값을 넣게되면 자동으로 최대길이까지 배열을 탐색할 수 있다.*/
        
        /*이게 가장가장 기본적인 배열탐색 방법이고 많이들 사용한다.*/
        
        /*출력결과를 보면 5 0 0 0 0인데 왜냐면 첫번째칸에만 5를 넣고 값을 입력하지 않았기 때문이니 더 직접입력해보자*/

        // Scanner라는 클래스이며 해당 클래스를 통해서 직접 값을 입력할 수 있다. 사용방법은 아래처럼 입력하면 된다. (변수명은 자유)
        Scanner scanner = new Scanner(System.in);
        System.out.println("값을 입력해보세요");
        for (int i = 0; i < myArray.length; i++) {
            myArray[i] = scanner.nextInt(); // 배열[i]에 int타입으로 값을 넣겠다는 표현이다.
        }
        System.out.println("입력끝");
        
        /*그럼 이제 직접 입력한 배열을 볼껀데 Chap_7 for에 대해서 설명을 할때*/
        /*for each(향상된 for문)라는것을 말했는데 그게 배열에 적합한 문법이니 지금 써보자*/
        for(int i : myArray) { // 배열의 타입에 맞추자
            System.out.print(i + " "); // myArray[i]를 출력한다는 표현이랑 같다, +랑 " "는 출력을 깔끔하기 위해서 입력했다.
        }

        /*for each가 훨씬 더 깔끔해 보이긴 한다.*/

        // 아까 입력하는 부분을 이렇게 할 수도 있겠다.
        System.out.println("다시 값을 입력해보세요!");
        for (int i : myArray) {
            i = scanner.nextInt();
        }
        System.out.println("다시끝");

        // 이제는 일반 for로 값들을 출력해보자
        for (int i = 0; i < myArray.length; i++) {
            System.out.println(myArray[i]);
        }
        
        /*마지막으로 배열길이에 대한 이야기와 처음으로 에러를 접해보자, 배열을 다루다보면 자주 접하게되는 에러니까 익숙해져야한다.*/

        // 예를들어서 난 배열길이를 5라고 적었는데 왜 i < 5라고 입력이 되어있을까?라고 생각해서 이렇게 바꾸었다.
        for (int i = 0; i <= myArray.length; i++) { // 5까지니까 포함을 해야지
            System.out.println(myArray[i]); // 5까지 배열을 봐야지
        }

        /*그랬더니 빨간색글씨와 함께 ArrayIndexOutOfBoundsException와 함께 옆에 친절하게 최대배열길이를 넘었다고 설명해준다.*/
        /*자바에서는 기본적으로 배열길이를 초과했을 때 에러를 설정해두었기에 이렇게 사용자에게 알려준다.*/

        /*그리고 배열길이를 설정할 때 왜 < 걸로 최대길이전에 멈추게 했는지 알게되었다.*/
        /*왜냐하면 해당 배열을 풀어보면 0 1 2 3 4 즉 5번째 칸은 없기에 배열을 초과했다고 나온다.*/

        /*그래서 쉽게 생각을 해보면 배열의 각 0 1 2 3 4를 index라고 표현을 하기도 한다. 다르게는 칸이라고 표현을 해도 되고*/
        /*어떤식이든 좋으니 배열에 익숙해지면 후에 알고리즘을 풀거나 간단한 자료를 나를때에 큰 도움이 된다.*/

        /*끝으로 간단한 자료들이라고 했고 전챕터 chap_7에서 컬렉션이라는것을 적었는데*/
        /*과장해서 말하면 배열의 완벽한 상위호환(?)이 존재하기 때문이다. 그걸 사용하기 위해서는 우선 배열과 친해져야한다.*/

    }

}
