package level_01.java_chap03;

// 객체와 생성자

public class Chap_03 {

    // 본격적인 객체파트부터는 각 챕터마다 크게 설명을 하지않는데
    // 그만큼 중요한 개념이기 때문이다.
    public static void main(String[] args) {
        /*앞에서 배운 내용처럼 객체를 생성하는 방법은 이제 숙지했다.*/
        class Dog {
            String name;
        }
        Dog dog = new Dog();
        dog.name = "개";
        /*여기까지 별다른 문제가 없다.*/

        /*그런데 지금까지 말을 하지 않았지만 모든 클래스는 "생성자"라는 것이 존재해야한다.*/
        /*갑자기 뜬금없는 소리로 들릴 수 있다. 지금까지는 그런 개념을 전혀 몰라도 객체를 생성하고*/
        /*사용하는데 아무런 문제가 없었으니까.*/

        /*그 이유는 컴파일러라는 친구가 사용자가 생성자를 만들지 않아도 자동으로 생성을 해주었기 때문이다.*/
        /*이제는 객체에 대해서 파고드는 시간이기 때문에 "생성자"라는 개념을 알고 가야한다.*/
        /*생성자가 존재해야 한다는것은 자바의 규칙이기 때문에 자바를 사용한다면 자바의 규칙을 지켜야한다.*/

        /*밑의 클래스와 비교를 하면서 해보자*/
        Cat cat1 = new Cat(); // 기본생성자를 통해서 생성한다.
        System.out.println(cat1.name); // 아무런 값이없다는 의미인 null이 나온다. 왜냐 값을 입력한적이 없으니
        Cat cat2 = new Cat("귀여운 고양이"); // 이렇게 생성자에 정의된 파라미터에 값을 넣는다!
        System.out.println(cat2.name); // 입력된 String값이 들어간다.
        /*생성자란 객체를 인스턴스화할 때 말그대로 "생성을 해주는 존재"라고 생각하자*/

        /*조금 더 자세하게 클래스의 인스턴스화를 살펴보면*/
        /*new 키워드로 Cat클래스가 인스턴스화가 진행된다.*/
        /*이때 Cat클래스에 있던 생성자가 호출된다.*/
        /*그리고 생성된 인스턴스의 주소는 참조변수(cat1, cat2)에 들어간다.*/

        // 같은 객체인지 비교를 해보자
        boolean result1 = cat1 instanceof Cat;
        boolean result2 = cat2 instanceof Cat;
        if (result1 == result2) {
            System.out.println("서로 다른 모양의 생성자를 사용했지만 결국 같은 클래스이다");
        }

        /*정리를 하자면 생성자는 하나의 클래스의 생성을 위해서는 필수적으로 들어가야하는 존재이다.*/

    }

}

// 우선 생성자의 이름은 무조건 클래스이름과 "동일하게"
// 또한 생성자는 return값이 없다.
class Cat {

    // 이게 "기본생성자"이다.
    // 해당 생성자는 클래스에 정의된 생성자가 "하나도 없을 때" 자동으로 생성한다.
    Cat() {
    }

    /* 보다시피 같은 형태는 중복이 안된다.
    Cat() {
    }
    */

    // 이렇게 생성자를 직접 정의해도 된다.
    // "this"는 해당 객체의 값을 참조하는 키워드이다.
    Cat(String name) { // 들어온 String값은
        this.name = name; // 해당 객체의 String값에 넣는다.
    }

    String name;

}
